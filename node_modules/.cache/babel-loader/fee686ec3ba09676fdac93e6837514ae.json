{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-04-loginpage/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // 로그인이 이미 되어있는 상태인지 로컬스토리지에서 확인 => 단점: 무한루프를 만들 수 있음\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and passw\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onLogout: logoutHandler\n    },\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Login","Home","MainHeader","AuthContext","App","isLoggedIn","setIsLoggedIn","loginHandler","email","password","localStorage","setItem","storedUserLoggedInInformation","getItem","logoutHandler","removeItem","onLogout"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-04-loginpage/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  // 로그인이 이미 되어있는 상태인지 로컬스토리지에서 확인 => 단점: 무한루프를 만들 수 있음\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and passw\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  useEffect(() => {\n    const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n    if (storedUserLoggedInInformation === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"isLoggedIn\");\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    >\n      {/* 필요한 해당 컴포넌트 전체를 AuthContext로 감싸면 그 안에 들어가있는 모든 컴포넌트는 해당 컨텍스트에 접근할 수 있음 */}\n      {/*<MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> ==>  AuthContext 에서 value로 전달하고 있으므로 따로 isAuthenticated로 props를 전달할 필요가 없음*/}\n      <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb;EACA;EACA;EACA;EACA;EAEA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;;EAEA,MAAMS,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;IACxC;IACAC,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmC,GAAnC;IACAL,aAAa,CAAC,IAAD,CAAb;EACD,CAJD;;EAMAP,SAAS,CAAC,MAAM;IACd,MAAMa,6BAA6B,GAAGF,YAAY,CAACG,OAAb,CAAqB,YAArB,CAAtC;;IACA,IAAID,6BAA6B,KAAK,GAAtC,EAA2C;MACzCN,aAAa,CAAC,IAAD,CAAb;IACD;EACF,CALQ,EAKN,EALM,CAAT;;EAOA,MAAMQ,aAAa,GAAG,MAAM;IAC1BJ,YAAY,CAACK,UAAb,CAAwB,YAAxB;IACAT,aAAa,CAAC,KAAD,CAAb;EACD,CAHD;;EAKA,oBACE,QAAC,WAAD,CAAa,QAAb;IACE,KAAK,EAAE;MAAED,UAAU,EAAEA,UAAd;MAA0BW,QAAQ,EAAEF;IAApC,CADT;IAAA,wBAKE,QAAC,UAAD;MAAA;MAAA;MAAA;IAAA,QALF,eAME;MAAA,WACG,CAACT,UAAD,iBAAe,QAAC,KAAD;QAAO,OAAO,EAAEE;MAAhB;QAAA;QAAA;QAAA;MAAA,QADlB,EAEGF,UAAU,iBAAI,QAAC,IAAD;QAAM,QAAQ,EAAES;MAAhB;QAAA;QAAA;QAAA;MAAA,QAFjB;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAxCQV,G;;KAAAA,G;AA0CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}