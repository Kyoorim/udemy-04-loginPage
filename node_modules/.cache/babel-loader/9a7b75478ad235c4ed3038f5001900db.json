{"ast":null,"code":"var _jsxFileName = \"/Users/kyoorim/Desktop/practice-coding/udemy-04-loginpage/src/App.js\";\nimport React from \"react\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\"; // import AuthContext from \"./store/auth-context\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  // 로그인이 이미 되어있는 상태인지 로컬스토리지에서 확인 => 단점: 무한루프를 만들 수 있음\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n  // ------여기서부터의 내용은 다 auth-context에서 관리하게 만듦!----\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and passw\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Login","Home","MainHeader","App","isLoggedIn","loginHandler","logoutHandler"],"sources":["/Users/kyoorim/Desktop/practice-coding/udemy-04-loginpage/src/App.js"],"sourcesContent":["import React from \"react\";\n\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n// import AuthContext from \"./store/auth-context\";\n\nfunction App() {\n  // 로그인이 이미 되어있는 상태인지 로컬스토리지에서 확인 => 단점: 무한루프를 만들 수 있음\n  // const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  // if (storedUserLoggedInInformation === \"1\") {\n  //   setIsLoggedIn(true);\n  // }\n\n  // ------여기서부터의 내용은 다 auth-context에서 관리하게 만듦!----\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // const loginHandler = (email, password) => {\n  //   // We should of course check email and passw\n  //   localStorage.setItem(\"isLoggedIn\", \"1\");\n  //   setIsLoggedIn(true);\n  // };\n\n  // useEffect(() => {\n  //   const storedUserLoggedInInformation = localStorage.getItem(\"isLoggedIn\");\n  //   if (storedUserLoggedInInformation === \"1\") {\n  //     setIsLoggedIn(true);\n  //   }\n  // }, []);\n\n  // const logoutHandler = () => {\n  //   localStorage.removeItem(\"isLoggedIn\");\n  //   setIsLoggedIn(false);\n  // };\n\n  return (\n    <React.Fragment>\n      {/* <AuthContext.Provider\n      value={{ isLoggedIn: isLoggedIn, onLogout: logoutHandler }}\n    > */}\n      {/* 필요한 해당 컴포넌트 전체를 AuthContext로 감싸면 그 안에 들어가있는 모든 컴포넌트는 해당 컨텍스트에 접근할 수 있음 */}\n      {/*<MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} /> ==>  AuthContext 에서 value로 전달하고 있으므로 따로 isAuthenticated로 props를 전달할 필요가 없음*/}\n      <MainHeader />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n      {/* </AuthContext.Provider> */}\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB,C,CACA;;;;AAEA,SAASC,GAAT,GAAe;EACb;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA,oBACE,QAAC,KAAD,CAAO,QAAP;IAAA,wBAME,QAAC,UAAD;MAAA;MAAA;MAAA;IAAA,QANF,eAOE;MAAA,WACG,CAACC,UAAD,iBAAe,QAAC,KAAD;QAAO,OAAO,EAAEC;MAAhB;QAAA;QAAA;QAAA;MAAA,QADlB,EAEGD,UAAU,iBAAI,QAAC,IAAD;QAAM,QAAQ,EAAEE;MAAhB;QAAA;QAAA;QAAA;MAAA,QAFjB;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD;;KA3CQH,G;AA6CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}